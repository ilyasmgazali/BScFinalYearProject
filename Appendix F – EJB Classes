Appendix F – EJB Classes
----- EJB Classes ------

ShoppingBasketLocal Class

package Model.EJB;
import Model.JPA.Customer;
import Model.JPA.Product;
import java.util.List;
import javax.ejb.Local;

@Local
public interface ShoppingBasketLocal {
    void addProduct(Product p);
    void removeProduct(String id );
    void checkout(String orderno, String cID);
    public List<Product> getBasketProducts();    
    void setCustomer(Customer c);
    Customer getCustomer();
}

ShoppingBasketBean Class

package Model.EJB;
import Model.JPA.Customer;
import Model.JPA.Orderline;
import Model.JPA.OrderlinePK;
import Model.JPA.Orders;
import Model.JPA.Product;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.PostConstruct;
import javax.ejb.Stateful;
import javax.ejb.StatefulTimeout;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
@Stateful
@StatefulTimeout(unit=TimeUnit.MINUTES, value = 20)
public class ShoppingBasketBean implements ShoppingBasketLocal {
    @PersistenceContext(unitName="FYPWebAppPU")
    private EntityManager em;
    private List shoppingCartProducts;    
    private Customer cus;
    @PostConstruct // method only used one time, to initialise
    private void intialiseBean(){
        shoppingCartProducts = new ArrayList<>();
        cus = new Customer();
    } 
    @Override    
    public void addProduct(Product prod) {
        shoppingCartProducts.add(prod);
    }
    @Override
    public void removeProduct(String id ){
        List<Product> prodlist = getBasketProducts();
        Product productToRemove = null;
        for (Product ps : prodlist){             
            if ( ps.getProductId().equals(id) ){
                productToRemove = em.find(Product.class, id);
            }   
        } 
        prodlist.remove(productToRemove);
        shoppingCartProducts = prodlist;
    }
    @Override
    public List<Product> getBasketProducts() {
        return shoppingCartProducts;
    }
    @Override
    public void setCustomer(Customer c){
        cus = c;
    }
    @Override 
    public Customer getCustomer(){
        return cus;
    }
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)//transaction type 
    public void checkout(String orderno, String cUsernam) {     
        Date date = new Date( );
        SimpleDateFormat dateformat = new SimpleDateFormat("yyyy.MM.dd");
        //dateformat.format(date);        
        Orders orders = new Orders();
        orders.setOrderNo(orderno);
        orders.setOrderDate(date);
        Customer cust = (Customer)em.createNamedQuery("Customer.findByCUsername").setParameter("cUsername", cUsernam).getSingleResult();      
        orders.setCustomerId(cust);
        String custID = cust.getCustomerId(); //delete?
        List<Product> prodlist = getBasketProducts();
//        try {
        em.persist(orders);
        for (Product ps : prodlist){ 
            OrderlinePK orderlinepk = new OrderlinePK();    
            orderlinepk.setOrderNo(orderno);
            orderlinepk.setProductId(ps.getProductId());
        //    em.persist(orderlinepk);
            Orderline orderline = new Orderline();
            orderline.setOrderlinePK(orderlinepk);
            orderline.setOrders(orders);
            orderline.setProduct(ps);
            orderline.setQuantity(1);
            em.persist(orderline);
        }
//        
//        }catch(Exception e){            
//        }  
        shoppingCartProducts.clear();
    }    
}


ProductFinderLocal Class

package Model.EJB;
import Model.JPA.Category;
import Model.JPA.Product;
import java.util.List;
import javax.ejb.Local;
@Local
public interface ProductFinderLocal {
    List<Product> getAllItems();
    List<Product> getItemCategory(String s);
    Product getProduct(String st);
    void newProduct (String id, String desc, Integer price, String catID);    
    void deleteProduct(String productId);
}

ProductFinderBean Class

package Model.EJB;
import Model.JPA.Category;
import Model.JPA.Product;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
@Stateless
public class ProductFinderBean implements ProductFinderLocal {     
    @PersistenceContext(unitName="FYPWebAppPU")
    private EntityManager em;
    @Override
    public List<Product> getAllItems() {
        return em.createNamedQuery("Product.findAll").getResultList();
    }
    @Override
    public List<Product> getItemCategory(String s){
        return em.createNamedQuery("Product.findByCategoryJoin").setParameter("category", s).getResultList();
    }
    @Override
    public Product getProduct(String productId){
        return em.find(Product.class, productId);
    }
    @Override 
    public void newProduct (String id, String desc, Integer price, String catID) {
        Product product = new Product();
        Category catObj = em.find(Category.class, catID);
        product.setProductId(id);
        product.setDescription(desc);
        product.setPrice(price);
        product.setCategoryId(catObj);       
        em.persist(product);
    }
    @Override 
    public void deleteProduct(String productId){
        Product prod = getProduct(productId);
        if (prod != null) {
         em.remove(prod);
        }
    }
}


CustomerLocal Class

package Model.EJB;
import javax.ejb.Local;

@Local
public interface CustomerLocal {
    boolean isValid();
    void validate();
    void currentCustomer(String s);
    String getCurrentCustomer();
}

CustomerBean Class

package Model.EJB;
import Model.JPA.Product;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.ejb.Stateful;
import javax.ejb.StatefulTimeout;
@Stateful
@StatefulTimeout(unit = TimeUnit.MINUTES, value = 30)
public class CustomerBean implements CustomerLocal {
    private boolean validateState = false;
    String customerUsername;

    List<Product> myProducts;
    @Override    
    public boolean isValid() {
        return validateState;
    } 
    @Override 
    public void validate() {        
        validateState = true;
    } 
    @Override
    public void currentCustomer(String s) {
        customerUsername = s;
    }
    @Override
    public String getCurrentCustomer(){
        return customerUsername;
    }

}

CustomerFinderLocal Class

package Model.EJB;

import Model.JPA.Customer;
import javax.ejb.Local;

@Local
public interface CustomerFinderLocal {
    Customer getCustomerWithID(String customerId);
    Customer getCustomerWithUsername(String uname);
    boolean validateCustomer(String uname, String pword);
    void newUser(String customerId, String cFirstname, String cLastname, String cUsername, String cPassword);
}

CustomerFinder Bean Class

package Model.EJB;
import Model.JPA.Customer;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
@Stateless
public class CustomerFinderBean implements CustomerFinderLocal{
    @PersistenceContext(unitName="FYPWebAppPU")
    private EntityManager em;    
    @Override 
    public Customer getCustomerWithID(String customerId) { 
        return em.find(Customer.class, customerId);
    } 
    @Override
    public Customer getCustomerWithUsername(String uname) { 
        return (Customer)em.createNamedQuery("Customer.findByCUsername").setParameter("cUsername", uname).getSingleResult();
    } 
    @Override
    public boolean validateCustomer(String uname, String pword) {       
        Boolean b = false;
        try{
            Customer c = (Customer)em.createNamedQuery("Customer.findByCUsername").setParameter("cUsername", uname).getSingleResult();        
            String p = c.getCPassword();           
            if (p == null ? pword == null : p.equals(pword)){
                b = true;
            }
            return b;
        }catch(Exception e){
            return b;
        }        
    }    
    @Override 
    public void newUser(String customerId, String cFirstname, String cLastname, String cUsername, String cPassword){
        Customer customer = new Customer();
        customer.setCustomerId(customerId);
        customer.setCFirstname(cFirstname);
        customer.setCLastname(cLastname);
        customer.setCUsername(cUsername);
        customer.setCPassword(cPassword);      
        em.persist(customer);
    }    
}
Appendix G – JPA Classes
----- JPA Classes ------
---- Generated Classes -----

Address Class

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "ADDRESS")
@NamedQueries({
    @NamedQuery(name = "Address.findAll", query = "SELECT a FROM Address a"),
    @NamedQuery(name = "Address.findByAddressId", query = "SELECT a FROM Address a WHERE a.addressId = :addressId"),
    @NamedQuery(name = "Address.findByAddLine1", query = "SELECT a FROM Address a WHERE a.addLine1 = :addLine1"),
    @NamedQuery(name = "Address.findByAddLine2", query = "SELECT a FROM Address a WHERE a.addLine2 = :addLine2"),
    @NamedQuery(name = "Address.findByPostcode", query = "SELECT a FROM Address a WHERE a.postcode = :postcode")})
public class Address implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "ADDRESS_ID")
    private String addressId;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 25)
    @Column(name = "ADD_LINE1")
    private String addLine1;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 25)
    @Column(name = "ADD_LINE2")
    private String addLine2;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 8)
    @Column(name = "POSTCODE")
    private String postcode;
    @JoinColumn(name = "CUSTOMER_ID", referencedColumnName = "CUSTOMER_ID")
    @ManyToOne
    private Customer customerId;

    public Address() {
    }

    public Address(String addressId) {
        this.addressId = addressId;
    }

    public Address(String addressId, String addLine1, String addLine2, String postcode) {
        this.addressId = addressId;
        this.addLine1 = addLine1;
        this.addLine2 = addLine2;
        this.postcode = postcode;
    }

    public String getAddressId() {
        return addressId;
    }

    public void setAddressId(String addressId) {
        this.addressId = addressId;
    }

    public String getAddLine1() {
        return addLine1;
    }

    public void setAddLine1(String addLine1) {
        this.addLine1 = addLine1;
    }

    public String getAddLine2() {
        return addLine2;
    }

    public void setAddLine2(String addLine2) {
        this.addLine2 = addLine2;
    }

    public String getPostcode() {
        return postcode;
    }

    public void setPostcode(String postcode) {
        this.postcode = postcode;
    }

    public Customer getCustomerId() {
        return customerId;
    }

    public void setCustomerId(Customer customerId) {
        this.customerId = customerId;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (addressId != null ? addressId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Address)) {
            return false;
        }
        Address other = (Address) object;
        if ((this.addressId == null && other.addressId != null) || (this.addressId != null && !this.addressId.equals(other.addressId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Address[ addressId=" + addressId + " ]";
    }
    
}

Admin Class

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "ADMINS")
@NamedQueries({
    @NamedQuery(name = "Admins.findAll", query = "SELECT a FROM Admins a"),
    @NamedQuery(name = "Admins.findByAdminId", query = "SELECT a FROM Admins a WHERE a.adminId = :adminId"),
    @NamedQuery(name = "Admins.findByAFirstname", query = "SELECT a FROM Admins a WHERE a.aFirstname = :aFirstname"),
    @NamedQuery(name = "Admins.findByASurname", query = "SELECT a FROM Admins a WHERE a.aSurname = :aSurname"),
    @NamedQuery(name = "Admins.findByAUsername", query = "SELECT a FROM Admins a WHERE a.aUsername = :aUsername"),
    @NamedQuery(name = "Admins.findByAPassword", query = "SELECT a FROM Admins a WHERE a.aPassword = :aPassword")})
public class Admins implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "ADMIN_ID")
    private String adminId;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 25)
    @Column(name = "A_FIRSTNAME")
    private String aFirstname;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 25)
    @Column(name = "A_SURNAME")
    private String aSurname;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 15)
    @Column(name = "A_USERNAME")
    private String aUsername;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 15)
    @Column(name = "A_PASSWORD")
    private String aPassword;

    public Admins() {
    }

    public Admins(String adminId) {
        this.adminId = adminId;
    }

    public Admins(String adminId, String aFirstname, String aSurname, String aUsername, String aPassword) {
        this.adminId = adminId;
        this.aFirstname = aFirstname;
        this.aSurname = aSurname;
        this.aUsername = aUsername;
        this.aPassword = aPassword;
    }

    public String getAdminId() {
        return adminId;
    }

    public void setAdminId(String adminId) {
        this.adminId = adminId;
    }

    public String getAFirstname() {
        return aFirstname;
    }

    public void setAFirstname(String aFirstname) {
        this.aFirstname = aFirstname;
    }

    public String getASurname() {
        return aSurname;
    }

    public void setASurname(String aSurname) {
        this.aSurname = aSurname;
    }

    public String getAUsername() {
        return aUsername;
    }

    public void setAUsername(String aUsername) {
        this.aUsername = aUsername;
    }

    public String getAPassword() {
        return aPassword;
    }

    public void setAPassword(String aPassword) {
        this.aPassword = aPassword;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (adminId != null ? adminId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Admins)) {
            return false;
        }
        Admins other = (Admins) object;
        if ((this.adminId == null && other.adminId != null) || (this.adminId != null && !this.adminId.equals(other.adminId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Admins[ adminId=" + adminId + " ]";
    }
    
}

Category Class

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import java.util.Collection;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "CATEGORY")
@NamedQueries({
    @NamedQuery(name = "Category.findAll", query = "SELECT c FROM Category c"),
    @NamedQuery(name = "Category.findByCategoryId", query = "SELECT c FROM Category c WHERE c.categoryId = :categoryId"),
    @NamedQuery(name = "Category.findByCategoryDescription", query = "SELECT c FROM Category c WHERE c.categoryDescription = :categoryDescription")})
public class Category implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "CATEGORY_ID")
    private String categoryId;
    @Size(max = 25)
    @Column(name = "CATEGORY_DESCRIPTION")
    private String categoryDescription;
    @OneToMany(mappedBy = "categoryId")
    private Collection<Product> productCollection;

    public Category() {
    }

    public Category(String categoryId) {
        this.categoryId = categoryId;
    }

    public String getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(String categoryId) {
        this.categoryId = categoryId;
    }

    public String getCategoryDescription() {
        return categoryDescription;
    }

    public void setCategoryDescription(String categoryDescription) {
        this.categoryDescription = categoryDescription;
    }

    public Collection<Product> getProductCollection() {
        return productCollection;
    }

    public void setProductCollection(Collection<Product> productCollection) {
        this.productCollection = productCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (categoryId != null ? categoryId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Category)) {
            return false;
        }
        Category other = (Category) object;
        if ((this.categoryId == null && other.categoryId != null) || (this.categoryId != null && !this.categoryId.equals(other.categoryId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Category[ categoryId=" + categoryId + " ]";
    }
    
}


Customer Class

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import java.util.Collection;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "CUSTOMER")
@NamedQueries({
    @NamedQuery(name = "Customer.findAll", query = "SELECT c FROM Customer c"),
    @NamedQuery(name = "Customer.findByCustomerId", query = "SELECT c FROM Customer c WHERE c.customerId = :customerId"),
    @NamedQuery(name = "Customer.findByCFirstname", query = "SELECT c FROM Customer c WHERE c.cFirstname = :cFirstname"),
    @NamedQuery(name = "Customer.findByCLastname", query = "SELECT c FROM Customer c WHERE c.cLastname = :cLastname"),
    @NamedQuery(name = "Customer.findByCUsername", query = "SELECT c FROM Customer c WHERE c.cUsername = :cUsername "),
    @NamedQuery(name = "Customer.findByCPassword", query = "SELECT c FROM Customer c WHERE c.cPassword = :cPassword")})
public class Customer implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "CUSTOMER_ID")
    private String customerId;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 25)
    @Column(name = "C_FIRSTNAME")
    private String cFirstname;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 25)
    @Column(name = "C_LASTNAME")
    private String cLastname;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 15)
    @Column(name = "C_USERNAME")
    private String cUsername;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 15)
    @Column(name = "C_PASSWORD")
    private String cPassword;
    @OneToMany(mappedBy = "customerId")
    private Collection<Orders> ordersCollection;
    @OneToMany(mappedBy = "customerId")
    private Collection<Address> addressCollection;

    public Customer() {
    }

    public Customer(String customerId) {
        this.customerId = customerId;
    }

    public Customer(String customerId, String cFirstname, String cLastname, String cUsername, String cPassword) {
        this.customerId = customerId;
        this.cFirstname = cFirstname;
        this.cLastname = cLastname;
        this.cUsername = cUsername;
        this.cPassword = cPassword;
    }

    public String getCustomerId() {
        return customerId;
    }

    public void setCustomerId(String customerId) {
        this.customerId = customerId;
    }

    public String getCFirstname() {
        return cFirstname;
    }

    public void setCFirstname(String cFirstname) {
        this.cFirstname = cFirstname;
    }

    public String getCLastname() {
        return cLastname;
    }

    public void setCLastname(String cLastname) {
        this.cLastname = cLastname;
    }

    public String getCUsername() {
        return cUsername;
    }

    public void setCUsername(String cUsername) {
        this.cUsername = cUsername;
    }

    public String getCPassword() {
        return cPassword;
    }

    public void setCPassword(String cPassword) {
        this.cPassword = cPassword;
    }

    public Collection<Orders> getOrdersCollection() {
        return ordersCollection;
    }

    public void setOrdersCollection(Collection<Orders> ordersCollection) {
        this.ordersCollection = ordersCollection;
    }

    public Collection<Address> getAddressCollection() {
        return addressCollection;
    }

    public void setAddressCollection(Collection<Address> addressCollection) {
        this.addressCollection = addressCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (customerId != null ? customerId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Customer)) {
            return false;
        }
        Customer other = (Customer) object;
        if ((this.customerId == null && other.customerId != null) || (this.customerId != null && !this.customerId.equals(other.customerId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Customer[ customerId=" + customerId + " ]";
    }
    
}

Orderline Class

/*
*******GENERATED CLASS
 */

package Model.JPA;

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "ORDERLINE")
@NamedQueries({
    @NamedQuery(name = "Orderline.findAll", query = "SELECT o FROM Orderline o"),
    @NamedQuery(name = "Orderline.findByOrderNo", query = "SELECT o FROM Orderline o WHERE o.orderlinePK.orderNo = :orderNo"),
    @NamedQuery(name = "Orderline.findByProductId", query = "SELECT o FROM Orderline o WHERE o.orderlinePK.productId = :productId"),
    @NamedQuery(name = "Orderline.findByQuantity", query = "SELECT o FROM Orderline o WHERE o.quantity = :quantity")})
public class Orderline implements Serializable {
    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected OrderlinePK orderlinePK;
    @Column(name = "QUANTITY")
    private Integer quantity;
    @JoinColumn(name = "PRODUCT_ID", referencedColumnName = "PRODUCT_ID", insertable = false, updatable = false)
    @ManyToOne(optional = false)
    private Product product;
    @JoinColumn(name = "ORDER_NO", referencedColumnName = "ORDER_NO", insertable = false, updatable = false)
    @ManyToOne(optional = false)
    private Orders orders;

    public Orderline() {
    }

    public Orderline(OrderlinePK orderlinePK) {
        this.orderlinePK = orderlinePK;
    }

    public Orderline(String orderNo, String productId) {
        this.orderlinePK = new OrderlinePK(orderNo, productId);
    }

    public OrderlinePK getOrderlinePK() {
        return orderlinePK;
    }

    public void setOrderlinePK(OrderlinePK orderlinePK) {
        this.orderlinePK = orderlinePK;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product;
    }

    public Orders getOrders() {
        return orders;
    }

    public void setOrders(Orders orders) {
        this.orders = orders;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (orderlinePK != null ? orderlinePK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Orderline)) {
            return false;
        }
        Orderline other = (Orderline) object;
        if ((this.orderlinePK == null && other.orderlinePK != null) || (this.orderlinePK != null && !this.orderlinePK.equals(other.orderlinePK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Orderline[ orderlinePK=" + orderlinePK + " ]";
    }

}

OrderlinePK Class 

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Embeddable
public class OrderlinePK implements Serializable {
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "ORDER_NO")
    private String orderNo;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "PRODUCT_ID")
    private String productId;

    public OrderlinePK() {
    }

    public OrderlinePK(String orderNo, String productId) {
        this.orderNo = orderNo;
        this.productId = productId;
    }

    public String getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(String orderNo) {
        this.orderNo = orderNo;
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (orderNo != null ? orderNo.hashCode() : 0);
        hash += (productId != null ? productId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof OrderlinePK)) {
            return false;
        }
        OrderlinePK other = (OrderlinePK) object;
        if ((this.orderNo == null && other.orderNo != null) || (this.orderNo != null && !this.orderNo.equals(other.orderNo))) {
            return false;
        }
        if ((this.productId == null && other.productId != null) || (this.productId != null && !this.productId.equals(other.productId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.OrderlinePK[ orderNo=" + orderNo + ", productId=" + productId + " ]";
    }
    
}

Orders Class 

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "ORDERS")
@NamedQueries({
    @NamedQuery(name = "Orders.findAll", query = "SELECT o FROM Orders o"),
    @NamedQuery(name = "Orders.findByOrderNo", query = "SELECT o FROM Orders o WHERE o.orderNo = :orderNo"),
    @NamedQuery(name = "Orders.findByOrderDate", query = "SELECT o FROM Orders o WHERE o.orderDate = :orderDate")})
public class Orders implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "ORDER_NO")
    private String orderNo;
    @Column(name = "ORDER_DATE")
    @Temporal(TemporalType.DATE)
    private Date orderDate;
    @JoinColumn(name = "CUSTOMER_ID", referencedColumnName = "CUSTOMER_ID")
    @ManyToOne
    private Customer customerId;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "orders")
    private Collection<Orderline> orderlineCollection;

    public Orders() {
    }

    public Orders(String orderNo) {
        this.orderNo = orderNo;
    }

    public String getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(String orderNo) {
        this.orderNo = orderNo;
    }

    public Date getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    public Customer getCustomerId() {
        return customerId;
    }

    public void setCustomerId(Customer customerId) {
        this.customerId = customerId;
    }

    public Collection<Orderline> getOrderlineCollection() {
        return orderlineCollection;
    }

    public void setOrderlineCollection(Collection<Orderline> orderlineCollection) {
        this.orderlineCollection = orderlineCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (orderNo != null ? orderNo.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Orders)) {
            return false;
        }
        Orders other = (Orders) object;
        if ((this.orderNo == null && other.orderNo != null) || (this.orderNo != null && !this.orderNo.equals(other.orderNo))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Orders[ orderNo=" + orderNo + " ]";
    }
    
}

Product Class

/*
*******GENERATED CLASS
 */
package Model.JPA;

import java.io.Serializable;
import java.util.Collection;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 *
 * @author im11abe
 */
@Entity
@Table(name = "PRODUCT")
@NamedQueries({
    @NamedQuery(name = "Product.findAll", query = "SELECT p FROM Product p"),
    @NamedQuery(name = "Product.findByProductId", query = "SELECT p FROM Product p WHERE p.productId = :productId"),
    @NamedQuery(name = "Product.findByDescription", query = "SELECT p FROM Product p WHERE p.description = :description"),
    @NamedQuery(name = "Product.findByPrice", query = "SELECT p FROM Product p WHERE p.price = :price"),
    @NamedQuery(name = "Product.findByCategoryJoin", query = "SELECT p FROM Product p JOIN p.categoryId a WHERE a.categoryId = :category"),//extra named query
})
public class Product implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 10)
    @Column(name = "PRODUCT_ID")
    private String productId;
    @Size(max = 25)
    @Column(name = "DESCRIPTION")
    private String description;
    @Column(name = "PRICE")
    private Integer price;
    @JoinColumn(name = "CATEGORY_ID", referencedColumnName = "CATEGORY_ID")
    @ManyToOne
    private Category categoryId;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "product")
    private Collection<Orderline> orderlineCollection;

    public Product() {
    }

    public Product(String productId) {
        this.productId = productId;
    }

    public String getProductId() {
        return productId;
    }

    public void setProductId(String productId) {
        this.productId = productId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }

    public Category getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Category categoryId) {
        this.categoryId = categoryId;
    }

    public Collection<Orderline> getOrderlineCollection() {
        return orderlineCollection;
    }

    public void setOrderlineCollection(Collection<Orderline> orderlineCollection) {
        this.orderlineCollection = orderlineCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (productId != null ? productId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Product)) {
            return false;
        }
        Product other = (Product) object;
        if ((this.productId == null && other.productId != null) || (this.productId != null && !this.productId.equals(other.productId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "Model.JPA.Product[ productId=" + productId + " ]";
    }
    
}
